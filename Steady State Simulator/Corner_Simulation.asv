function [sector_time, max_speed_kmh] = Corner_Simulation(total_mass, us_mass_f...
            , us_mass_r, wheelbase, weight_d, track_f, track_r, hcg...
            , hrf, hrr, huf, hur, torque, rpm, gear_ratios, final_ratio...
            , tire_radious, brakes_g_force, rolling_coef, mr_wheel_spring_f...
            , mr_wheel_spring_r, mr_arb_f, mr_arb_r, k_spring_f, k_spring_r...
            , k_arb_f, k_arb_r, downforce_coef, drag_coef, area, k_tire_f...
            , k_tire_r, c2, c1, c0, air_t, atm_p...
            , distance, corner_radious)

% Performance Simulator v1.1
% Date: 2-12-2013
% Author: César Álvarez Porras (www.cesar-ap.com)

% Script: Calculates maximum lateral force for different values of Weight
% distribution, K Springs, K ARB and Frontal Area.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                     %%%
%%%                         Variables Declaration                       %%%
%%%                                                                     %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Physics constants
    g = 9.81;
    pi = 3.14159;

    % Scenario
    ay = 17; % g
    speed = 150; % Km/h

%     % Vehicle
%     Total_Mass = 1200;% Kg
%     US_Mass_f = 40;% Kg
%     US_Mass_r = 46;% Kg
%     Wheelbase = 2.890;% m
%     Weight_distribution = [0.45, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.55]; %
%     track_f = 1.698;% m
%     track_r = 1.620;% m
%     hcg = 0.45;% m
%     hrf = 0;% m
%     hrr = 0;% m
%     huf = 0.33;% m
%     hur = 0.355;% m
% 
%     % Suspension
%     MR_wheel_spring_f = 1; %
%     MR_wheel_spring_r = 1; %
%     MR_ARB_f = 0.8; %
%     MR_ARB_r = 0.8; %
%     K_spring_F = [507500, 545000, 595000, 625000];% Nm
%     K_spring_R = [507500, 545000, 595000, 625000];% Nm
%     K_ARB_F = [325000, 360000, 400000];% Nm
%     K_ARB_R = [325000, 360000, 400000];% Nm
% 
%     % Aerodynamics
%     air_t = 23;% C degrees
%     atm_p = 1000;% mbar
%     Downforce_coef = [1.4, 1.5, 1.6, 1.65];% 
%     Drag_coef = [0.75, 0.8, 0.825 0.835];% 
%     Area = [1.375, 1.400, 1.425, 1.45];% m^2
% 
%     %Tire model
%     K_tire_f = 95000;% Nm
%     K_tire_r = 95000;% Nm
%     % K_tire_f = 331800;% Nm
%     % K_tire_r = 417725;% Nm
%     c2=[-0.00022, -0.00027];
%     c1=[2.1, 2.3];
%     c0=[100, 250];




    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%                                                                     %%%
    %%%                               Execution                             %%%
    %%%                                                                     %%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Variables to perform the execution
    Fz_static = zeros(2,2); % Empty array of zeros for output Fz_static
    Fz = zeros(2,2); % Empty array of zeros for output Fz
    Fz_downforce = zeros(1); % Empty array of zeros for output Fz Downforce
    Fy = zeros(2,2); % Empty array of zeros for output Fy
    Fy_combined = zeros(1); % Empty array of zeros for output Combined Fy
    yaw_moment = zeros(1); % Empty array of zeros for output Yaw Moment


    % Initial calculations
    us_mass = us_mass_f + us_mass_r; % total US Mass
    s_mass = total_mass - us_mass; % total S Mass
    hs = (total_mass * hcg - us_mass * (huf + hur)/2) / s_mass; % S Mass CG height
    total_mass_f = total_mass * weight_d; %Kg
    total_mass_r = total_mass * (1 - weight_d); %Kg 
    s_mass_f = total_mass_f - us_mass_f; %Kg
    s_mass_r = total_mass_r - us_mass_r; %Kg
    a = total_mass_r / total_mass * wheelbase; %m
    b = total_mass_f / total_mass * wheelbase; %m

    % 1st - Calculate the Static Loads
    Fz_static = Static_Load(total_mass, weight_d, g);

    % 2nd Calculate the initial AR Stiffness Distribution and the Roll Gradient
    [roll_gradient, AR_stiff_d_1, ha, ART_front, ART_rear] = Anti_Roll_Torque(...
        hs, a, b, hrf, hrr, wheelbase, track_f, track_r, k_spring_f, k_spring_r...
        , k_arb_f, k_arb_r, mr_wheel_spring_f, mr_wheel_spring_r, mr_arb_f...
        , mr_arb_r, s_mass, ay, g);
    %AR_stiff_d_1 % 1st Magic Number (1)

    % Calculate the Load Transfer Elastic distribution and total Load Transfer
    [LT_e_distribution, LT_distribution_1] = Load_Transfer(...
        s_mass_f, s_mass_r, us_mass_f, us_mass_r, AR_stiff_d_1 , huf, hur, hrf...
        , hrr, hs, ay, track_f, track_r);
    %LT_e_distribution % 1st Magic Number (2)
    %LT_distribution_1 % 2nd Magic Number 

    % Calculate the AR Stiffness Distribution considering the tire stiffness
    AR_stiff_d_2 = Third_Magic_Number(track_f, track_r, k_tire_f, k_tire_r...
        , ART_front, ART_rear);
    %AR_stiff_d_2 % 3rd Magic Number (1)

    % Re calculate the total Load Transfer considering the tire stiffness
    [LT_e_distribution, LT_distribution_2, LT_total_f, LT_total_r] = Load_Transfer(...
        s_mass_f, s_mass_r, us_mass_f, us_mass_r, AR_stiff_d_2 , huf, hur, hrf...
        , hrr, hs, ay, track_f, track_r);
    %LT_distribution_2 % 3rd Magic Number (2)
    %LT_total_f
    %LT_total_r

    % Calculate the Normal Load on each corner
    Fz = Normal_Load(Fz_static, LT_total_f, LT_total_r, ay, g);
    %Fz % Corner Loads

    % Calculate the Aerodynamic downforce
    Fz_downforce = Aerodynamics(air_t, atm_p, downforce_coef, area, speed);                    

    % Calculate the Lateral Force from the tires based on the Normal load
    Fz = Fz + Fz_downforce; % Add the Downforce to the Normal load
    Fy = Tire_Model(c2, c1, c0, g, Fz);
    %Fy % Lateral Force on each tire

    % Final calculations
    yaw_moment = a * (Fy(1,1) + Fy(1,2)) - b * (Fy(2,1) + Fy(2,2));




    fprintf ('\nThe maximum Fy Combined [N] @ %d Km/h is %d on iteration number %d\n',speed, Fy_combined_opt, iteration);
    ay = Fy / total_Mass;
    fprintf ('The maximum lateral acceleration for that Fy is %d G.\n', ay_opt);
    fprintf ('For the following setup options:\n - Weight distribution: %d\n - K Spring (F/R)[N]: %d / %d\n - K ARB (F/R)[N]: %d / %d\n',Weight_d_opt, K_spring_f_opt, K_spring_r_opt, K_ARB_f_opt, K_ARB_r_opt);
    %fprintf ('The Static Normal Load is:\n %d\n', Fz_static_opt);
    %fprintf ('The Normal Load is:\n %d\n', Fz_opt);
    %fprintf ('The Lateral Force is:\n %d\n', Fy_opt);
    fprintf ('The Frontal Area is: %d [m^2]\n', area_opt);
    fprintf ('The Downforce is: %d [N]\n', Fz_downforce_opt);
    fprintf ('---------------------------------------------------------------------\n\n')
%     Fz_static_opt
%     Fz_opt
%     Fy_opt
%     fprintf ('The Yaw Moment is: %d\n',yaw_moment_opt);

%     % Plots Fy Fz points over Tire Response Graphs
%     Tire_Response(c2, c1, c0, g, Fz_opt);

%     number_of_iterations = linspace(1,number_of_iterations,number_of_iterations);
    % % Plotting Yaw Moment against Number of iterations
    % set(figure,'Name','Yaw Moment','NumberTitle','off');
    % scatter(number_of_iterations, yaw_moment,6,'b');
    % xlabel('Num Iterations');
    % ylabel('Yaw Moment');
    % grid on;

%     % Plotting Fy combined against Number of iterations
%     set(figure,'Name','Lateral Force Combined','NumberTitle','off');
%     scatter(number_of_iterations, Fy_combined,6,'r');
%     xlabel('Num Iterations');
%     ylabel('Lateral Force Combined [N]');
%     grid on;

%     % Plotting Lateral Force against Weight Distribution
%     set(figure,'Name','Lateral Force','NumberTitle','off');
%     subplot(2,2,1);
%     scatter(number_of_iterations, Fy(1,1,:),6,'r');
%     xlabel('Num Iterations');
%     ylabel('Lateral Force FL [N]');
%     grid on;
%     subplot(2,2,2);
%     scatter(number_of_iterations, Fy(1,2,:),6,'g');
%     xlabel('Num Iterations');
%     ylabel('Lateral Force FR [N]');
%     grid on;
%     subplot(2,2,3);
%     scatter(number_of_iterations, Fy(2,1,:),6,'b');
%     xlabel('Num Iterations');
%     ylabel('Lateral Force RL [N]');
%     grid on;
%     subplot(2,2,4);
%     scatter(number_of_iterations, Fy(2,2,:),6,'y');
%     xlabel('Num Iterations');
%     ylabel('Lateral Force RR [N]');
%     grid on;

    
    % Calculation of sector time and Maximum Speed.
    max_speed_ms = sqrt(ay_opt*g*corner_radious);

    sector_time = distance / max_speed_ms;
    
    max_speed_kmh = max_speed_ms / 0.27;
    
    
end